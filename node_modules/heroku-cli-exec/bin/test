#!/bin/bash

assert_equal() {
  local expected="${1}"
  local actual="${2}"
  if [ "$expected" != "$actual" ]; then
    echo "\nFAILED: expected ${expected}, found ${actual}"
    exit 1
  fi
}

assert_contains() {
  local expected="${1}"
  local actual="${2}"
  if echo "$actual" | grep -qi "$expected"; then
    :
  else
    echo "\nFAILED: expected ${expected} to match ${actual}"
    exit 1
  fi
}

cleanup() {
  local app="${1}"
  echo ''
  echo 'Cleaning up...'
  heroku destroy ${app} --confirm ${app}
  cd ../..
  rm -rf tmp/${app}

  if [ "$TRAVIS" != "true" ]; then
    pgid=$(ps -o pgid= $$ | grep -o [0-9]*)
    echo "Killing processes in group $pgid..."
    kill -- -$pgid
  fi
}

wait_for() {
  local cmd="${1}"
  sleep 2
  attempts=0
  until $(${cmd}); do
    attempts=$((attempts+1))
    if [ $attempts -gt 10 ]; then
      echo "Too many attempts waiting for service!"
      exit 1
    fi
    sleep 2
  done
}

set -e

heroku plugins:link .

app="heroku-exec-test-${RANDOM:-$TRAVIS_BUILD_ID}"
echo "Preparing test app ${app}..."

mkdir -p tmp
cd tmp
rm -rf ${app}
mkdir ${app}
cd ${app}

echo "Creating git repo..."
git init
web="ruby -rwebrick -e\"s=WEBrick::HTTPServer.new(:BindAddress => '0.0.0.0', :Port => \$PORT, :DocumentRoot => Dir.pwd); s.mount_proc('/'){|q,r| r.body='Hello'}; s.start\""
echo "web: ${web}" > Procfile

echo "Creating Heroku app..."
heroku create ${app}
heroku buildpacks:set https://github.com/ryandotsmith/null-buildpack
git add Procfile
git commit -m "first"

trap "{ cleanup ${app}; }" EXIT

initOutput="$(heroku ps:exec "ls" 2>&1)"
assert_contains "Initializing feature" "$initOutput"
assert_contains "Adding the Heroku Exec buildpack" "$initOutput"
assert_contains "Run the following commands to redeploy your app" "$initOutput"
assert_contains "git push heroku master" "$initOutput"
echo "=== test 1: success"

assert_contains "Heroku Exec is not running!" "$(heroku ps:exec --status 2>&1)"
echo "=== test 2: success"

output="$(heroku ps:exec ls 2>&1)"
assert_contains "Establishing credentials" "$output"
assert_contains "Could not connect to dyno!" "$output"
echo "=== test 3: success"

echo "Deploying..."
git push heroku master

echo -n "Waiting for dyno..."
state="starting"
while [ "up" != "$state" ]; do
  if [ "starting" != "$state" ]; then
    echo "WARNING: dyno state is \"${state}\""
  fi
  echo -n "."
  sleep 2
  state=$(heroku ps --json | jq .[0].state -r)
done
echo ""

heroku ps:exec pwd
# assert_equal "/app" "$(heroku ps:exec pwd)"

output="$(heroku ps:exec --status)"
assert_contains "web.1" "$output"
assert_contains "running" "$output"
assert_contains "up" "$output"
echo "=== test 4: success"


file_to_copy="file-to-copy.txt"
heroku ps:scale web=0
heroku run:detached "echo 'success' > ${file_to_copy}; echo 'class A{public static void main(String[] a) throws Exception{while(true){Thread.sleep(1000);}}}' > A.java; javac A.java; java A & ruby -rwebrick -e'WEBrick::HTTPServer.new(:Port => 3000, :DocumentRoot => Dir.pwd).start'"
dyno="$(heroku ps --json | jq .[0].name -r)"

sleep 5

heroku logs -d $dyno

assert_contains "run." "$dyno"
output="$(heroku ps:copy --dyno $dyno $file_to_copy)"
assert_contains "Copying ${file_to_copy} to ${file_to_copy}" "$output"
assert_contains "success" "$(cat ${file_to_copy})"
echo "=== test 5: success"

eval "heroku ps:forward --app $app --dyno $dyno 3000 &"
wait_for "curl -o /dev/null -s -I -f localhost:3000"
assert_contains "${file_to_copy}" "$(curl -s -L localhost:3000)"
echo "=== test 6: success"

assert_contains "${file_to_copy}" "$(curl --socks5 localhost:1080 -s -L 0.0.0.0:3000)"
echo "=== test 7: success"

dump="$(heroku java:jstack --dyno $dyno)"
assert_contains "Full thread dump OpenJDK" "$dump"
echo "=== test 8: success"

dump="$(heroku java:jmap --dyno $dyno)"
assert_contains "#instances" "$dump"
assert_contains "java.lang.String" "$dump"
echo "=== test 9: success"

echo ""
echo "SUCCESS: All tests passed!"
